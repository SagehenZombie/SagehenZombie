#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var UUID = require('node-uuid');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

  players = [];
io.on('connection',function(client){
  console.log('a new connection!');
  if(typeof copiedPlayers!='undefined'){
    players = copiedPlayers;
    copiedPlayers = undefined;
  }
  console.log(players);
  client.emit('welcome',{players:players});

  client.on('connected',function(info){
    //create the player
    var player = {name:info.name,avatar:info.avatar,id:UUID()};
    client.emit('id',{id:player.id});
    client.player = player;
    //add the player to the list of players
    players.push(player);
    //send the new player info to other players
    client.broadcast.emit('newPlayer',{player:client.player});
    console.log('\t socket.io:: player ' + client.player.id + client.player.name + ' connected'+players.length);
    if(players.length>=2){
      client.emit('countdown');
      client.broadcast.emit('countdown');
      console.log('countdown starts');
      setTimeout(function(){
        client.emit('game start');
        client.broadcast.emit('game start');
        copiedPlayers = JSON.parse(JSON.stringify(players));
      },100);
    }
  });

  client.on('move',function(data){
    var player = data.player;
    client.broadcast.emit('move',{player:player});
    console.log('\t socket.io:: player ' + player.id + ' moved');
  });

  client.on('infect',function(data){
      var victim = data.victim;
      client.broadcast.emit('infect',{victim:victime});
  });

  client.on('disconnect', function () {
    console.log('hhh');
    index = players.indexOf(client.player);
    players.splice(index,1);
    client.broadcast.emit('gonePlayer',{player:client.player});
    console.log('\t socket.io:: client disconnected ' + client.userid );

  });

  client.on('started',function(){
    time = 180000;
    setInterval(function(){
      time = time - 1000;
      client.emit('time elapsed',time);
      if (time<=0){
        client.emit('gameover');
        client.broadcast.emit('gameover');
      }
    },1000)
  });

  client.on('result',function(data){
    var folks = data.players;
    winner = 'zombie';
    for(i in folks){
      if(folks[i].avatar=='human'){
        winner = 'human';
      }
    }
    client.emit('winner',{winner:winner});
  })
})
